name: Build, Push Docker Image & Deploy Kubernetes Cluster

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE: web-application-gitaction

jobs:

  terraform-and-build:
    runs-on: ubuntu-latest
    outputs:
      TERRAFORM_ECR_URI: ${{ steps.tf_output.outputs.TERRAFORM_ECR_URI }}
      MASTER_IP: ${{ steps.tf_output.outputs.MASTER_IP }}
      WORKER_IPS: ${{ steps.tf_output.outputs.WORKER_IPS }}
      ECR_DYNAMIC_URI: ${{ steps.ecr_dynamic.outputs.ECR_DYNAMIC_URI }}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3


      - name: Terraform Import Existing Resources
        working-directory: ./Terraform
        run: |
          terraform init 
          terraform import aws_key_pair.mykeyname mykeyname || echo "Key pair exists"
          terraform import aws_ecr_repository.my_ecr_repo my-ecr-repo || echo "ECR exists"
          terraform import aws_iam_role.ec2_cloudwatch_role ec2_cloudwatch_role || echo "IAM role exists"
          terraform import aws_iam_instance_profile.ec2_cloudwatch_profile ec2_cloudwatch_profile || echo "Instance profile exists"


      - name: Create dynamic ECR if not exists
        id: ecr_dynamic
        run: |
          aws ecr describe-repositories --repository-names $DOCKER_IMAGE || \
          aws ecr create-repository --repository-name $DOCKER_IMAGE
          ECR_DYNAMIC_URI=$(aws ecr describe-repositories --repository-names $DOCKER_IMAGE --query "repositories[0].repositoryUri" --output text)
          echo "ECR_DYNAMIC_URI=$ECR_DYNAMIC_URI" >> $GITHUB_OUTPUT

      - name: Terraform Apply
        working-directory: ./Terraform
        run: terraform apply -auto-approve

      - name: Get Terraform ECR URI and EC2 IPs
        id: tf_output
        working-directory: ./Terraform
        run: |
          TERRAFORM_ECR_URI=$(terraform output -raw ecr_uri)
          echo "TERRAFORM_ECR_URI=$TERRAFORM_ECR_URI" >> "$GITHUB_OUTPUT"
          MASTER_IP=$(terraform output -raw master_public_ip)
          echo "MASTER_IP=$MASTER_IP" >> "$GITHUB_OUTPUT"
          WORKER_IPS=$(terraform output -json worker_public_ips)
          echo "WORKER_IPS=$WORKER_IPS" >> "$GITHUB_OUTPUT"

  dockerbuild-push:
    runs-on: ubuntu-latest
    needs: terraform-and-build
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3  

      - name: Log in to both ECRs
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ needs.terraform-and-build.outputs.ECR_DYNAMIC_URI }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ needs.terraform-and-build.outputs.TERRAFORM_ECR_URI }}

      - name: Build Docker image
        working-directory: ./app
        run: docker build -t $DOCKER_IMAGE:latest .

      - name: Push to dynamic ECR
        run: |
          docker tag $DOCKER_IMAGE:latest ${{ needs.terraform-and-build.outputs.ECR_DYNAMIC_URI }}:latest
          docker push ${{ needs.terraform-and-build.outputs.ECR_DYNAMIC_URI }}:latest

      - name: Push to Terraform ECR
        run: |
          docker tag $DOCKER_IMAGE:latest ${{ needs.terraform-and-build.outputs.TERRAFORM_ECR_URI }}:latest
          docker push ${{ needs.terraform-and-build.outputs.TERRAFORM_ECR_URI }}:latest

  ansible_deploy:
    needs: dockerbuild-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible and dependencies
        run: |
          sudo yum update -y
          sudo yum install -y ansible sshpass jq netcat-openbsd python3-pip
          pip3 install --user boto3

      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create Inventory
        run: |
          echo "[master]" > inventory
          echo "${{ needs.terraform-and-build.outputs.MASTER_IP }} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory
          echo "[workers]" >> inventory
          for ip in $(echo '${{ needs.terraform-and-build.outputs.WORKER_IPS }}' | jq -r '.[]'); do
            echo "$ip ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory
          done

      - name: Ansible Config
        run: |
          echo "[defaults]" > ansible.cfg
          echo "host_key_checking = False" >> ansible.cfg
          echo "inventory = ./inventory" >> ansible.cfg

      - name: Install Python 3.8 on all nodes
        run: |
          ansible all -i inventory -m raw -a "sudo amazon-linux-extras enable python3.8 && sudo yum install -y python3.8" -u ec2-user --private-key ~/.ssh/id_rsa

      - name: Update inventory to use Python 3.8
        run: |
          sed -i 's|ansible_ssh_private_key_file|ansible_python_interpreter=/usr/bin/python3.8 ansible_ssh_private_key_file|' inventory

      - name: Run Master Script via SSH
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ needs.terraform-and-build.outputs.MASTER_IP }} 'bash -s' < ./Ansible/master.sh

      - name: Run Worker Script via SSH
        run: |
          for ip in $(echo '${{ needs.terraform-and-build.outputs.WORKER_IPS }}' | jq -r '.[]'); do
            ssh -i ~/.ssh/id_rsa ec2-user@$ip 'bash -s' < ./Ansible/worker.sh
          done
